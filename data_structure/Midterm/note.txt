1. 자료구조 
    (1) 효율적인 데이터 관리 : 데이터 관리할 수 있는 프레임 워크를 제공함

    (2) CS의 분야와 긴밀하게 연관되어 있다. 

2. 배열 (Array)
    (1) 동일한 데이터 타입을 가진 값들을 연속된 공간에 저장하는 자료구조(고정된 길이와 타입) 

    (2) create(type, size) : 주어진 타입과 길이(size)를 가지는 배열을 생성
        read(arr, index) : 배열(arr)에서 주어진 (index)에 해당하는 자료를 반환 
        update(arr, index, value) : 배열(arr) 에서 주어진 index 위치에 새로운 데이터를 저장

    (3) Student student_array[90] : 주어진 타입과 길이를 가지는 배열을 생성
        Student *student_array = (Student *) malloc(sizeof(Student) * 90);

        student = student_array[0]; <- read
        student_array[0] = new_data; <- update

3. 추상 자료형(abstract data type)(ADT)
    -> 사용자 정의를 해서 자료구조를 표현 
        사용자의 관점에서 자료구조가 데이터를 처리하는 방법과 그에 대한 연산으로 자료구조를 표현

4. 구조체 선언(Structure) 

    typedef struct Student{
        int id;

    } Student;

    student.id = asdfasdfasf

5. void pointer 

    보이드 포인터는 임의의 데이터 타입을 가르킬 수 있는 특별한 유형의 포인터 

6. 동적 메모리 할당 
    
    malloc 특정 양의 메모리를 할당함 
    realloc 이전에 할당한 메모리 블록의 크기를 변경함
            int *ptr_ = (int *) realloc(ptr, 10 * sizeof(int));
    free 이전에 할당된 메모리를 해제함 
            free(ptr); 

7. 배열을 이용한 리스트의 구현 
    (1) 리스트는 크기가 고정되지 않고 필요에 따라 자동으로 크기가 늘어나는 자료구조

    (2) create, read, update, append, destroy

    (3) typedef struct{
            int *array;
            int size;
            int capacity;
        } List; 

8. 알고리즘 
    (1) 입력(input): 알고리즘은 0개 이상의 입력을 받음
    (2) 출력(output): 알고리즘은 적어도 하나의 출력을 생성함
    (3) 명확성(Definiteness): 각 단계는 명확하게 정의되어야 함
    (4) 유한성(Finiteness): 알고리즘은 유한한 수의 단계 후에 종료되어야 함
    (5) 효율성(Effectiveness): 각 명령은 충분히 기본적이어서 사람이 쉽게 따라갈 수 있어야 한다. 

9. 알고리즘의 표현 방법
    (1) 자연어(Natural Language) : 직관적인 자연어로 설명함 
        -> 장점 : 쉽게 이해할 수 있음 주요 논리 개념을 강조
        -> 단점 : 부정확한 해석의 여지가 있음, 자연어를 코드로 변역시 추가 단계가 필요함 

    (2) 프로그래밍 언어(Programming Language) : 프로그래밍 언어로 알고리즘을 표현시 가장 자세하고 실행할 수 있는 표현 
        -> 장점 : 완전한 실행 가능한 설명, 즉각적인 테스트 및 검증 
        -> 단점 : 이해하기 위해 특정 프로그래밍 언어에 대한 지식이 필요 
                  디테일한 정보가 많아 직관적이지 않음

    (3) 순서도(Flowchart) : 그림을 사용하여 알고리즘의 단계와 흐름을 표현함 
        -> 장점 : 그림으로 표현되어 있어 논리의 흐름을 쉽게 따라갈 수 있음
        -> 단점 : 알고리즘이 어려워지면 순서도가 많이 어려워짐, 수정 시간이 매우 길다

    (4) 슈도 코드(Pseudocode) : 자연어와 기본 프로그래밍 구조를 결합하여 알고리즘을 설명 
        -> 장점 : 프로그래머가 아닌 사람도 읽고 이해하기가 쉽다. 알고리즘에 핵심 논리만을 구조적으로 표현할 수 있다. 
        -> 단점 : 구현 디테일을 표현하지 못할 수도 있다. 

10. 알고리즘의 성능 비교를 할 때 
     (1) 실제 실행 시간으로 비교할 경우에 문제점 
         -> 실제로 구현해야 함 
            동일한 조건의 하드웨어를 사용해서 실행 시간을 측정해야 한다. 
            사용한 소프트웨어 환경도 동일해야 한다. (같은 프로그래밍 언어로 구현해야 함)
            다른 데이터에 대해서는 또 다른 결과가 나올 수도 있음.
        
     (2) 점근 표기법 
         -> 세 가지 점근 표기법
            Big - O notation (최악으로 동작하는 경우)
            f(n), g(n) -> f(n) = O(g(n)) or f(n) in O(g(n)) if there exist positive constant c, n_0 s.t. for all n >= n_0 0<=f(n)<=cg(n)

            Big - Omega notation (최선으로 동작하는 경우)
            f(n), g(n) -> f(n) = Omega(g(n)) or f(n) in Omega(g(n)) if there exist positive constant c, n_0 s.t. for all n >= n_0 f(n)>=cg(n)

            Theta notation (평균적인 비용)
            f(n), g(n) -> f(n) = Theta(g(n)) or f(n) in Theta(g(n)) if there exist positive constant c_1, c_2, n_0 s.t. for all n >= n_0 c_1g(n)<=f(n)<=c_2g(n)

* 명제가 valid 한지 증명하는 것은 항상 그런지 판단하는 것 

11. 스택 : 후입 선출(LIFO) 원칙을 따르는 자료구조
            (1) create() <- allocate stack 
                isEmpty(s)
                isFull(s)
                push(s,x) overflow 위험
                pop(s) underflow 위험 
                peek(s)

            (2) typedef struct {
                    int * items;
                    int top;
                    int capacity;
                } Stack;


                allocate Stack -> allocate Array -> top = -1 -> capacity = maxCapacity -> return stack

                capacity - 1 과 비교
                push는 top+=1 -> 넣기
                pop은 빼고 top-=1
                item 먼저 free 후 밖에 struct free하기 

12. Queue : FIFO 원칙을 따르는 자료구조 
            (1) create()
                enqueue(q,e) -> overflow 존재
                dequeue(q)-> underflow 존재 
                peek(q)
                isEmpty(q)
                isFull(q) -> size == capacity 로 판단 

            (2) circular Queue
                create -> rear = front 
                enqueue -> rear += 1 (rear 자리는 비어있음)
                dequeue -> front -= 1

            (3) typedef struct{
                int *items;
                int front; <- 0 
                int rear; <- 0 
                int size; <- 0
                int capacity; <- max capacity
                } Queue;

                enqueue -> rear 에 넣고 + 1, size도 + 1
                dequeue -> front 빼내고 front +1, size -1

13. Deque : 전단과 후단에 모두 삽입과 삭제가 가능한 큐
            (1) create
                addFront
                deleteFront
                getFront
                addRear
                deleteRear
                getReae
                isEmptyisFull
                size
             
14. 연결 리스트 : 배열을 사용한 것과 달리 동적으로 크기 조절이 가능함 + 용량을 늘릴 때 많은 연산을 필요로 하지 않는다. 다양한 타입을 받을 수 있다.  삽입과 삭제를 효율적으로 할 수 있다. 연속된 공간을 크게 필요로 하지 않는다. 
            (1) typedef struct Node{
                int data;
                struct Node* next;
                } Node;
                연결

                처음 Node 를 가르키는게 헤드 포인터(Head pointer)

            (2) 단순 연결 리스트
                원형 연결 리스트 
                이중 연결 리스트 

            (3) 연결리스트로 구현한 스택
                create() <- stack allocate, top <- Null
                isEmpty(s)
                push(s,x)
                pop(s)
                pop(s)
                peek(s)
                destory(s)

            (4) typedef struct Stack {
                    Node* top;
                } Stack;

                typedef struct Node {
                    int data;
                    struct Node* next;
                }

                push data
                -> allocate Node -> node.data = data -> node.next = stack.top stack.top = node

                pop stack top 받아서 data 얻고 stack top <- top.next 로 -> free(node) 

                destroy 를 top 이 Null 이 아니게 될때까지 node 받고 top 갱신하고 free 반복 그리고 마지막에 free 전체 하기 

            (5) 연결리스트로 구현한 큐 
                 typedef struct Queue{
                    Node* front;
                    Node* rear;
                 } Queue;

                 enqueue -> isEmpty 일때는 따로 해줘야함 
                 dequeue -> node 에 front 받고 data까지 저장하고 front 위치 바뚸주고 
                 queue.front = Null 이면 rear 도 Null 으로 

                 destroy 도 front = Null 될때까지 front 받고 front 갱신하고 터뜨리고 free 전체 하고 

            (6) 리스트 -> 임의의 위치에 삽입 삭제가 가능
                 
                 typedef struct List {
                    Node* head; <- Null로
                    int size; <- 0
                 }

                append 는 끝에 insert 는 중간

                head = Null 일때 아닐때 나눠서 Null 이 아니게 될때까지 전진 -> node 넣기 -> size 1 추가 

                index 에 추가면 앞에서 4번째 가 아니라 진짜 index 4여야 됨 size 처리 
                
                delete 도 index 0 이면 따로 

                destroy도 null 이 될때까지 갱신
